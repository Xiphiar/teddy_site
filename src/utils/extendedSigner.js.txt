import { SigningCosmWasmClient } from 'secretjs';
import retry from 'async-await-retry';
const textEncoding = require('text-encoding');
const TextDecoder = textEncoding.TextDecoder;
//const encoding_1 = require("@iov/encoding");

export class ExtendedSender extends SigningCosmWasmClient {

    AsyncTxById = async(txHash) => {
        const res = await this.restClient.txById(txHash);
        let logs = {};
        console.log("res", res);
        res.logs[0].events[1].attributes.map((obj) => { logs[obj.key.trim()] = obj.value.trim() });
        res.wasm_logs=logs;
        return {
            ...res,
            transactionHash: txHash,
        };
    }

    //convert tx logs into key-value pairs
    processLogs = (tx) => {
        let logs = [];
        for (let i = 0; i < tx.logs.length; i++) {
            let temp = {}
            tx.logs[i].events[1].attributes.map((obj) => { temp[obj.key.trim()] = obj.value.trim() });
            logs.push(temp);
          }
        console.log("logs!", logs)
        tx.kv_logs=logs;
        return tx;
    }

    asyncExecute = async (
        contractAddress,
        handleMsg,
        memo = "",
        transferAmount = null,
        fee = null,
        codeHash = null,
      ) => {
        let tx;

        try {
          tx = await this.execute(contractAddress, handleMsg, memo, transferAmount, fee, codeHash);
        } catch (e) {
          console.error(`failed to broadcast tx: ${e}`);
          throw `failed to broadcast tx: ${e}`;
        }
        //tx.transactionHash
        try {
          await sleep(3000);
          const res = await this.checkTx(tx.transactionHash)
            
          return {
            ...res,
            transactionHash: tx.transactionHash,
          };

        } catch (e) {
          console.error(`failed to broadcast tx: ${e}`);
          throw `failed to broadcast tx: ${e}`;
        }
    }

    //poll for if TX hash has been processed
    checkTx = async(txHash, interval=6000, retries=10) => {
        try {
            await sleep(3000);
            let res = await retry(
                () => {
                return this.restClient.txById(txHash);
                },
                null,
                { retriesMax: retries, interval: interval },
            );

            if (res.code){
                // return {
                //     ...res,
                //     transactionHash: txHash,
                // }; 
                console.error(res.raw_log)
                throw res.raw_log;
            }

            let data=this.decodeResponse(res);
            data=this.processLogs(data);
            console.log(data)
            return {
                ...data,
                transactionHash: txHash,
            };

        } catch (e) {
            console.error(e);
            if (e.toString().includes('not found')) {
              console.error(`Timed out while waiting for transaction: ${e}`);
              throw('Timed out while waiting for transaction. Your transaction is probably processed, check the gallery.')
            } else {
              console.error(e)
              throw(e);
            }
        }
    }

  decodeResponse = (tx) => {
    if (new TextDecoder().decode(tx.data)){
      tx.data = JSON.parse(new TextDecoder().decode(tx.data));
    }

    return tx;
  }
}